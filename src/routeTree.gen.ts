/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as SearchIndexImport } from "./routes/search/index";
import { Route as ProfileIndexImport } from "./routes/profile/index";
import { Route as FavoriteIndexImport } from "./routes/favorite/index";
import { Route as CommunityIndexImport } from "./routes/community/index";
import { Route as authSignupIndexImport } from "./routes/(auth)/signup/index";
import { Route as authSigininIndexImport } from "./routes/(auth)/siginin/index";

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const SearchIndexRoute = SearchIndexImport.update({
  id: "/search/",
  path: "/search/",
  getParentRoute: () => rootRoute,
} as any);

const ProfileIndexRoute = ProfileIndexImport.update({
  id: "/profile/",
  path: "/profile/",
  getParentRoute: () => rootRoute,
} as any);

const FavoriteIndexRoute = FavoriteIndexImport.update({
  id: "/favorite/",
  path: "/favorite/",
  getParentRoute: () => rootRoute,
} as any);

const CommunityIndexRoute = CommunityIndexImport.update({
  id: "/community/",
  path: "/community/",
  getParentRoute: () => rootRoute,
} as any);

const authSignupIndexRoute = authSignupIndexImport.update({
  id: "/(auth)/signup/",
  path: "/signup/",
  getParentRoute: () => rootRoute,
} as any);

const authSigininIndexRoute = authSigininIndexImport.update({
  id: "/(auth)/siginin/",
  path: "/siginin/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/community/": {
      id: "/community/";
      path: "/community";
      fullPath: "/community";
      preLoaderRoute: typeof CommunityIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/favorite/": {
      id: "/favorite/";
      path: "/favorite";
      fullPath: "/favorite";
      preLoaderRoute: typeof FavoriteIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/profile/": {
      id: "/profile/";
      path: "/profile";
      fullPath: "/profile";
      preLoaderRoute: typeof ProfileIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/search/": {
      id: "/search/";
      path: "/search";
      fullPath: "/search";
      preLoaderRoute: typeof SearchIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/(auth)/siginin/": {
      id: "/(auth)/siginin/";
      path: "/siginin";
      fullPath: "/siginin";
      preLoaderRoute: typeof authSigininIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/(auth)/signup/": {
      id: "/(auth)/signup/";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof authSignupIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/community": typeof CommunityIndexRoute;
  "/favorite": typeof FavoriteIndexRoute;
  "/profile": typeof ProfileIndexRoute;
  "/search": typeof SearchIndexRoute;
  "/siginin": typeof authSigininIndexRoute;
  "/signup": typeof authSignupIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/community": typeof CommunityIndexRoute;
  "/favorite": typeof FavoriteIndexRoute;
  "/profile": typeof ProfileIndexRoute;
  "/search": typeof SearchIndexRoute;
  "/siginin": typeof authSigininIndexRoute;
  "/signup": typeof authSignupIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/community/": typeof CommunityIndexRoute;
  "/favorite/": typeof FavoriteIndexRoute;
  "/profile/": typeof ProfileIndexRoute;
  "/search/": typeof SearchIndexRoute;
  "/(auth)/siginin/": typeof authSigininIndexRoute;
  "/(auth)/signup/": typeof authSignupIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/community"
    | "/favorite"
    | "/profile"
    | "/search"
    | "/siginin"
    | "/signup";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/community"
    | "/favorite"
    | "/profile"
    | "/search"
    | "/siginin"
    | "/signup";
  id:
    | "__root__"
    | "/"
    | "/community/"
    | "/favorite/"
    | "/profile/"
    | "/search/"
    | "/(auth)/siginin/"
    | "/(auth)/signup/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  CommunityIndexRoute: typeof CommunityIndexRoute;
  FavoriteIndexRoute: typeof FavoriteIndexRoute;
  ProfileIndexRoute: typeof ProfileIndexRoute;
  SearchIndexRoute: typeof SearchIndexRoute;
  authSigininIndexRoute: typeof authSigininIndexRoute;
  authSignupIndexRoute: typeof authSignupIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CommunityIndexRoute: CommunityIndexRoute,
  FavoriteIndexRoute: FavoriteIndexRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
  authSigininIndexRoute: authSigininIndexRoute,
  authSignupIndexRoute: authSignupIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/community/",
        "/favorite/",
        "/profile/",
        "/search/",
        "/(auth)/siginin/",
        "/(auth)/signup/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/community/": {
      "filePath": "community/index.tsx"
    },
    "/favorite/": {
      "filePath": "favorite/index.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    },
    "/(auth)/siginin/": {
      "filePath": "(auth)/siginin/index.tsx"
    },
    "/(auth)/signup/": {
      "filePath": "(auth)/signup/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
